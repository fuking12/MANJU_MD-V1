const { cmd } = require('./Command.js');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

cmd({
    pattern: 'henati',
    desc: 'Hentai ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß API ‡∂ë‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è',
    category: 'media',
    filename: 'HentaiDownloadPlugin.js',
    fromMe: false
}, async (Void, citel, text) => {
    try {
        // URL ‡∑Ñ‡∑ù query ‡∂ë‡∂ö ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø‡∑ê‡∂∫‡∑í ‡∂∂‡∂Ω‡∂±‡∑Ä‡∑è
        if (!text) {
            return await citel.reply('‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù URL ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂ã‡∂Ø‡∑è: !henati <video_name_or_url>');
        }

        // Loading indicator
        await citel.reply('üîç Hentai ‡∑Ä‡∑í‡∂©‡∑í‡∂∫‡∑ù ‡∑É‡∑ú‡∂∫‡∂∏‡∑í‡∂±‡∑ä... ‡∂ß‡∑í‡∂ö‡∂ö‡∑ä ‡∂â‡∂±‡∑ä‡∂±...');

        // API request ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
        const apiUrl = 'https://www.dark-yasiya-api.site/download/henati';
        const response = await axios.get(apiUrl, {
            params: { query: text.trim() },
            headers: { 'User-Agent': 'WhatsAppBot/1.0' }
        });

        // API response ‡∂ë‡∂ö check ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        if (!response.data || !Array.isArray(response.data.videos) || response.data.videos.length === 0) {
            return await citel.reply('‡∂î‡∂∂‡∑ö query ‡∂ë‡∂ö‡∂ß Hentai ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑î‡∂´‡∑ö ‡∂±‡∑ê‡∑Ñ‡∑ê.');
        }

        // ‡∂¥‡∑ê‡∑Ö‡∂≥‡∑ö video ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
        const video = response.data.videos[0];
        
        // Validate the necessary fields exist
        if (!video.title || !video.duration || !video.quality || !video.url) {
            return await citel.reply('‡∂Ü‡∂¥‡∑É‡∑î ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠‡∑ä ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∂ß ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∂±‡∑ê‡∑Ä‡∑î‡∂∏‡∑ä ‡∂∂‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑ä‡∑Ç‡∑ö‡∂¥ ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑í.');
        }

        // Video ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
        await citel.reply(
            `üé¨ *‡∑Å‡∑ì‡∂ª‡∑ä‡∑Ç‡∂∫:* ${video.title}\n` +
            `‚è± *‡∂ö‡∑è‡∂Ω‡∂∫:* ${video.duration}\n` +
            `üìä *‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫:* ${video.quality}\n` +
            `‚¨áÔ∏è ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä... ‡∂ß‡∑í‡∂ö‡∂ö‡∑ä ‡∂â‡∂±‡∑ä‡∂±...`
        );

        // Temp directory ‡∂ë‡∂ö check ‡∂ö‡∂ª‡∂Ω‡∑è create ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        const tempDir = path.join(__dirname, '../temp');
        await fs.mkdir(tempDir, { recursive: true });

        // Video ‡∂ë‡∂ö ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        const videoResponse = await axios.get(video.url, {
            responseType: 'arraybuffer'
        });

        // Temp file path ‡∂ë‡∂ö ‡∑Ñ‡∂Ø‡∂±‡∑Ä‡∑è
        const tempFilePath = path.join(tempDir, `${Date.now()}_hentai.mp4`);
        
        // Write the file safely
        await fs.writeFile(tempFilePath, Buffer.from(videoResponse.data));
        
        // Video ‡∂ë‡∂ö WhatsApp ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂∫‡∑Ä‡∂±‡∑Ä‡∑è
        await citel.reply({
            video: { url: tempFilePath },
            caption: `‡∂∏‡∑ô‡∂±‡∑ä‡∂± ‡∂î‡∂∂‡∑ö Hentai ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù: ${video.title}`,
            mimetype: 'video/mp4'
        });

    } catch (error) {
        console.error('Hentai command ‡∂ë‡∂ö‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:', error.message);  // Log only the error message for a cleaner log
       
       let errorMessage = '‚ùå Hentai ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂©‡∑Ä‡∑î‡∂±‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑î‡∂´‡∑è. ';
       
       if (error.response) {
           errorMessage += '‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∑í‡∑Ä‡∑í‡∑É‡∑ô‡∂±‡∑ä‡∂±.';  // If it's a response error
       } else if (error.code) {
           errorMessage += `‡∂Ø‡∑ù‡∑Ç ‡∂ö‡∑ö‡∂≠‡∂∫: ${error.code}`;  // If it has a code property
       } else {
           errorMessage += error.message;  // General fallback for other errors
       }
       
       await citel.reply(errorMessage);
   } finally {
       try {
           // Cleanup the temp file regardless of whether there was an error or not but ensure it exists first.
           if (tempFilePath && fs.existsSync(tempFilePath)) {
               await fs.unlink(tempFilePath);
           }
       } catch (cleanupError) {
           console.error('Failed to delete temp file:', cleanupError.message);
       }
   }
});
    
