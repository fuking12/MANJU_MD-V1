const { cmd } = require("../command"); // command.js import ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è

// Button mode state
let isButtonMode = false;

// Command to toggle button mode
cmd({
  pattern: "mode", // Command pattern
  desc: "Toggle button mode on or off",
  category: "Utility",
  filename: __filename,
}, async (conn, mek, m, { from, q, reply }) => {
  try {
    const mode = q.toLowerCase().trim();

    if (mode === "button") {
      isButtonMode = true;
      await conn.sendMessage(from, {
        text: "üéØ Button mode ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂∫‡∑í! Commands ‡∂Ø‡∑ê‡∂±‡∑ä buttons ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.",
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
        },
      }, { quoted: mek });
      await conn.sendMessage(from, { react: { text: "‚úÖ", key: mek.key } });
    } else if (mode === "nonebutton") {
      isButtonMode = false;
      await conn.sendMessage(from, {
        text: "‚ùå Button mode ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂∫‡∑í! Commands ‡∂Ø‡∑ê‡∂±‡∑ä text responses ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.",
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
        },
      }, { quoted: mek });
      await conn.sendMessage(from, { react: { text: "üö´", key: mek.key } });
    } else {
      await conn.sendMessage(from, {
        text: "‚ö†Ô∏è ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í mode ‡∂ë‡∂ö‡∂ö‡∑ä! ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±: .mode button ‡∑Ñ‡∑ù .mode nonebutton",
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
        },
      }, { quoted: mek });
      await conn.sendMessage(from, { react: { text: "‚ùì", key: mek.key } });
    }

    // Debugging ‡∑É‡∂≥‡∑Ñ‡∑è mode log ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    console.log(`[Mode Toggle] isButtonMode set to: ${isButtonMode}`);
  } catch (e) {
    console.error("[Mode Toggle Error]:", e);
    await conn.sendMessage(from, {
      text: `üö® ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e.message || "‡∂∫‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑î‡∂´‡∑è!"}\n‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.`,
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
      },
    }, { quoted: mek });
   -cornerstone
    await conn.sendMessage(from, { react: { text: "‚ùå", key: mek.key } });
  }
});

// isButtonMode export ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
module.exports = { isButtonMode };
