const axios = require('axios');

module.exports = {
    pattern: 'animetv',
    fromMe: false,
    desc: '‡∂á‡∂±‡∑í‡∂∏‡∑ö ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏ ‡∑É‡∑Ñ‡∑í‡∂≠)',
    category: 'download',
    function: async (sock, mek, m, { reply, args }) => {
        try {
            const query = args.join(' ');
            
            if (!query) {
                return await reply('‚ùå ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: !anime search_term\n‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫: !anime solo leveling 110');
            }

            // ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø ‡∑É‡∑ú‡∂∫‡∂∏‡∑í‡∂±‡∑ä...
            await reply('üîç ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø ‡∑É‡∑ú‡∂∫‡∂∏‡∑í‡∂±‡∑ä...');
            const searchUrl = `https://thenux-solo-leveling-api.vercel.app/search?q=${encodeURIComponent(query)}`;
            const searchResponse = await axios.get(searchUrl);
            
            if (!searchResponse.data || searchResponse.data.length === 0) {
                return await reply('‚ùå ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫. ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂±‡∂∏‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.');
            }

            // ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì‡∂∏
            const results = searchResponse.data.slice(0, 5); // ‡∂¥‡∑Ö‡∂∏‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω 5 ‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä
            let resultText = 'üìñ ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑ñ ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø:\n\n';
            results.forEach((item, index) => {
                resultText += `${index+1}. ${item.title}\n`;
            });
            resultText += '\n‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø‡∂∫‡∑ö ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂∫‡∑Ä‡∂±‡∑ä‡∂± (1-5)';

            await reply(resultText);

            // ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂ª‡∑ê‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            const waitForResponse = async () => {
                return new Promise((resolve) => {
                    const listener = async (response) => {
                        if (response.key.remoteJid === m.key.remoteJid && 
                            response.key.fromMe === m.key.fromMe &&
                            response.message) {
                            const selected = parseInt(response.message.conversation);
                            if (!isNaN(selected) && selected >= 1 && selected <= results.length) {
                                sock.ev.off('messages.upsert', listener);
                                resolve(results[selected-1]);
                            }
                        }
                    };
                    sock.ev.on('messages.upsert', listener);
                    
                    // 30 ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª‡∂∫‡∂ö‡∑í‡∂±‡∑ä timeout
                    setTimeout(() => {
                        sock.ev.off('messages.upsert', listener);
                        resolve(null);
                    }, 30000);
                });
            };

            const selectedChapter = await waitForResponse();
            if (!selectedChapter) {
                return await reply('‚è∞ ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑ì ‡∂á‡∂≠. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.');
            }

            // ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ä
            await reply(`üì• ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏: ${selectedChapter.title}\n\n‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏:\n1. ‡∂ã‡∑É‡∑É‡∑ä\n2. ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫\n3. ‡∂Ö‡∂©‡∑î`);

            const selectedQuality = await waitForResponse();
            if (!selectedQuality || isNaN(parseInt(selectedQuality.message.conversation))) {
                return await reply('‚è∞ ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏. ‡∂ã‡∑É‡∑É‡∑ä ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∫‡∑í.');
            }

            const quality = ['high', 'medium', 'low'][parseInt(selectedQuality.message.conversation)-1] || 'high';

            // ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            await reply(`‚¨áÔ∏è ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏: ${selectedChapter.title} (${quality} quality)...`);
            const downloadUrl = `https://thenux-solo-leveling-api.vercel.app/chapter?url=${encodeURIComponent(selectedChapter.url)}&quality=${quality}`;
            const downloadResponse = await axios.get(downloadUrl, { responseType: 'arraybuffer' });

            // ‡∂¥‡∑í‡∂±‡∑ä‡∂≠‡∑ñ‡∂ª‡∂∫ ‡∂ë‡∑Ä‡∑ì‡∂∏
            await sock.sendMessage(
                m.key.remoteJid, 
                { 
                    image: downloadResponse.data,
                    caption: `‚úÖ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø‡∂∫: ${selectedChapter.title}\n‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: ${quality}`
                },
                { quoted: mek }
            );

        } catch (error) {
            console.error('‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫:', error);
            await reply('‚ùå ‡∂¥‡∂ª‡∑í‡∂†‡∑ä‡∂°‡∑ö‡∂Ø‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑É‡∂∏‡∂≠‡∑ä ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.');
        }
    }
};
